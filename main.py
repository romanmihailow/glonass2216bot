import asyncio
from telethon import TelegramClient, events
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
from dotenv import load_dotenv
from telethon.errors import FloodWaitError
import random

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
PHONE_NUMBER = os.getenv("PHONE_NUMBER")
BOT_USERNAME = os.getenv("BOT_USERNAME")

SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
GOOGLE_CREDENTIALS_FILE = os.getenv("GOOGLE_CREDENTIALS_FILE")

CAR_NUMBERS = [
    "–ê410–ù–°702", "–í582–ê–û702", "–ö197–ú–ù702", "–ö873–ú–ö702", "–í634–û–•702",
    "–ö775–ö–ê702", "–ö993–ï–£702", "–ê082–°–í702", "–ê092–û–í702", "–ê142–°–í702",
    "–ê145–ù–°702", "–ê529–û–°702", "–ê990–•–ú702", "–í038–ê–ù702", "–í589–ê–ù702",
    "–í607–ê–£702", "–ö012–ú–ú702", "–ö438–ï–°702", "–ö556–ï–°702", "–ö619–ö–ê702",
    "–ö849–ï–£702", "–ú509–ö–í702", "–ê459–ê–°702", "–†145–£–ï102", "–†146–£–ï102",
    "–†400–ö–•102", "–†575–ú–°102", "–¢710–û–ê102", "–£407–•–ù102", "–£410–û–ê102",
    "–£428–•–ù102", "–£490–û–ê102", "–•472–û–°102", "–•592–¢–†102"
]

POLL_INTERVAL_MINUTES = int(os.getenv("POLL_INTERVAL_MINUTES", 10))


def col_number_to_letter(n):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –≤ –±—É–∫–≤—É (1 -> A, 2 -> B, ...)"""
    string = ""
    while n > 0:
        n, remainder = divmod(n - 1, 26)
        string = chr(65 + remainder) + string
    return string


def insert_column_shift_right(spreadsheet, insert_index=1):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç –ø—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü, —Å–¥–≤–∏–≥–∞—è –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–ø—Ä–∞–≤–æ"""
    sheet = spreadsheet.get_worksheet(0)
    sheet_id = sheet.id

    body = {
        "requests": [{
            "insertDimension": {
                "range": {
                    "sheetId": sheet_id,
                    "dimension": "COLUMNS",
                    "startIndex": insert_index,
                    "endIndex": insert_index + 1
                },
                "inheritFromBefore": False
            }
        }]
    }

    print(f"sheet_id: {sheet_id}")
    print(f"Request body: {body}")

    spreadsheet.batch_update(body)
    print("–°—Ç–æ–ª–±–µ—Ü —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω")


async def poll_once():
    print("–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–ø—Ä–æ—Å...")

    client = TelegramClient('sessions/session', API_ID, API_HASH)
    try:
        await client.start(phone=PHONE_NUMBER)
    except FloodWaitError as e:
        print(f"–ñ–¥–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram...")
        await asyncio.sleep(e.seconds)
        await client.start(phone=PHONE_NUMBER)

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive.file",
        "https://www.googleapis.com/auth/drive"
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_CREDENTIALS_FILE, scope)
    gclient = gspread.authorize(creds)
    spreadsheet = gclient.open_by_key(SPREADSHEET_ID)

    statuses = []

    async def get_response(number):
        nonlocal client
        response_text = None

        @client.on(events.NewMessage(from_users=BOT_USERNAME))
        async def handler(event):
            nonlocal response_text
            if event.message.message.startswith(f"–ì–†–ó: {number}"):
                response_text = event.message.text.strip()
                client.remove_event_handler(handler)

        await client.send_message(BOT_USERNAME, number)

        for _ in range(20):
            await asyncio.sleep(0.5)
            if response_text:
                break

        if not response_text:
            return "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞"

        if "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤" in response_text:
            print(f"{number} ‚Äî –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥...")
            await asyncio.sleep(15)
            return await get_response(number)

        try:
            date_str = response_text.split("–æ—Ç")[-1].strip()
            last_seen = datetime.strptime(date_str, "%d-%m-%Y %H:%M:%S")
            delta = datetime.now() - last_seen
            if delta.total_seconds() <= 3600:
                return "üü¢ –ù–∞ —Å–≤—è–∑–∏"
            else:
                return "üî¥ –ù–µ—Ç —Å–≤—è–∑–∏"
        except Exception:
            return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"

    total_requests = len(CAR_NUMBERS)

    for i, number in enumerate(CAR_NUMBERS, start=1):
        response_text = await get_response(number)
        wait_time = random.randint(6, 10)
        print(f"–ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º... {i}/{total_requests} –¢–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å: {number} –û—Ç–≤–µ—Ç: {response_text}")
        statuses.append(response_text)
        await asyncio.sleep(wait_time)

    await client.disconnect()

    current_time_str = datetime.now().strftime("%d-%m-%Y %H:%M:%S")

    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü –Ω–∞ –º–µ—Å—Ç–æ B
    insert_column_shift_right(spreadsheet, insert_index=1)

    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Å—Ç –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏
    sheet = spreadsheet.get_worksheet(0)

    # –ó–∞–ø–æ–ª–Ω—è–µ–º B1 –¥–∞—Ç–æ–π, –∞ –Ω–∏–∂–µ ‚Äî —Å—Ç–∞—Ç—É—Å–∞–º–∏
    new_col = [current_time_str] + statuses
    col_letter = col_number_to_letter(2)  # B
    cell_range = f"{col_letter}1:{col_letter}{len(new_col)}"
    sheet.update(cell_range, [[item] for item in new_col])

    print(f"–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω –≤ {current_time_str}")


async def main():
    while True:
        await poll_once()
        print(f"–û–∂–∏–¥–∞–µ–º {POLL_INTERVAL_MINUTES} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞...")
        await asyncio.sleep(POLL_INTERVAL_MINUTES * 60)


if __name__ == "__main__":
    asyncio.run(main())
